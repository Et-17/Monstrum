use super::Node;

/// This structure stores the mazes that are generated by this module. It also
/// has width and height information directly accessible to
/// - speed up the program
/// - make the struct easier to use
/// - avoid weird issues over owning the nodes array
pub struct Maze {
    pub nodes: Vec<Vec<Node>>,
    pub width: usize,
    pub height: usize,
}

impl Maze {
    /// Creates a new maze from the given nodes. Automatically calculates the
    /// size of the given maze: x by the column count, and y by the node count
    /// in the first column.
    pub fn new(nodes: &Vec<Vec<Node>>) -> Maze {
        Maze {
            // I'm pretty sure that the way to do this is to take a ref and then
            // own it so I don't copy the argument on accident or copy it onto
            // the stack when the executor didn't want to
            width: nodes.len(),
            height: nodes[0].len(),
            nodes: nodes.to_owned(),
        }
    }
}
